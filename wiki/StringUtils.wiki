#summary Class StringUtils do OpenSutils-Br4J
#labels StringUtils,Featured,Phase-Implementation,Java,Utils,abbreviate,abreviação,Accentuation,Acentuação,Pad

= StringUtils =

Está classe abstrata oferece métodos estáticos para utilização com a classe
java.lang.String do Java6+ afim de porporcionar funcionalidades para facilitar o 
manuseio de textos.

== Detalhes ==

Os métodos disponíveis nesta classe são:

<ul>
<li>abbreviateName(String, int)</li>
<li>capitalize(String)</li>
<li>capitalizeAll(String)</li>
<li>ignoreEmpty(String)</li>
<li>leftPad(String, int, String)</li>
<li>parseNameFile(String)</li>
<li>remove(String, char...)</li>
<li>removeAccentuation(String)</li>
<li>removeSymbols(String)</li>
<li>rightPad(String, int, String)</li>
<li>truncateAndRightPad</li>
<li>truncateAndLeftPad</li>
<li>isNullOrEmpty</li>
<li>nullToEmpty</li>

</ul>


<ul>
<li>
===abbreviateName===
_public static String abbreviateName(String, int);_

Este método abrevia um nome completo diminuindo-o até a posição informada no segundo parâmetro deste método. A abreviação apenas é realizada no nome do meio(sobrenome) e apenas se o nome for maior que o tamanho definido.
Exemplo:
{{{
	String resp = StringUtils.abbreviateName("BARTOLOMEU SILVADOS SANTOS DIAS", 30);
	//resp equals to: "BARTOLOMEU S. S. DIAS
}}}
</li>
<li>
===capitalize===
_public static String capitalize(final String value);_

Este método transforma a primeira letra, da primeira palavra do parâmetro, em maiúscula mantendo as 

outras letras como estão.
</li>
<li>
===capitalizeAll===
_public static String capitalizeAll(final String value);_

Este método transforma todas as primeiras letras, de cada palavra, em maiúscula mantendo as outras letras como estão.
</li>
<li>
===ignoreEmpty===
_public static String ignoreEmpty(final String value);_

Este metodo ignora valores vazios retornando null para estes casos.
Exemplo:
{{{
	StringUtils.ignoreEmpty("  ") == null //is true
}}}
</li>
<li>
===leftPad===
_public static String leftPad(String value, int size,String pad);_

Este método adiciona um texto(@param pad) do lado esquerdo do primeiro parâmetro (@param value) até preencher o tamanho(@param size)
Exemplo:
{{{
	String value = "2333";
	String resp = StringUtils.leftPad(value,5,"R");
	//resp equals to: "R2333"
	
	resp = StringUtils.leftPad(value,8," ");
	//resp equals to: "    2333"
}}}
</li>
<li>
===parseNameFile===
_public static String parseNameFile(final String path);_

Este método obtém o nome de um arquivo a partir de um caminho completo de um arquivo(@param path)
Exemplo:
{{{
String result = StringUtils.parseNameFile("c:\\test\\file\\file1.txt"); 
//result equals to: "file1.txt"
}}}
</li>
<li>
===remove===
_public static String remove(final String value,char... charSymbols);_

Este método remove todos os caracteres do parâmetro 'value' que forem igual as caracteres do parametro 'charSymbols'
</li>
<li>
===removeAccentuation===
_public static String removeAccentuation(final String value);_

Este método remove todas as acentuações das letras que tem acentuação.
Exemplo:
{{{
	String str = "SÃO PRAÇA JOSÉ É DAS";
	//str equalst to : "SAO PRACA JOSE E DAS"
}}}
</li>
<li>
===removeSymbols===
_public static String removeSymbols(final String value);_

Este método remove todos os caracteres de símbolos, aqueles que não são numero e letras, a virgula(',') e ponto('.') são mantidos.
</li>
<li>
===rightPad===
_public static String rightPad(	String value,int tamanho,String pad);_

Este metodo adiciona um texto(@param pad) do lado direito do primeiro parâmetro (@param value) até preencher o tamanho(@param size)
Exemplo:
{{{
	String value = "2525225252";
	String resp = StringUtils.rightPad(value,14,"0");
	//resp equals to: "25252252520000"
}}}
</li>
<li>
===truncateAndRightPad===
_public static String truncateAndRightPad(	String value,int maxLength, String pad);_

ADDICIONADO NA VERSÃO 0.2
Este método formata uma String, truncando caso o 'value' for maior que o tamanho (@param maxLength) ou tambem adiciona (@param pad) do lado direito do primeiro parâmetro (@param value) até preencher o tamanho(@param maxLength)
Exemplo: 
{{{
String value = StringUtils.truncateAndRightPad("VALOR", 12, "X"  );
//value será igual a "VALORXXXXXXX" como que o tamanho é menor que 12 sera adicionado o caracter 'X' até preencher com 12 posições.


value = StringUtils.truncateAndRightPad("   123456789", 5, " "  );
//value será igual a "12345" , como o tamanho é maior que 5 o value será truncado até 5 posições
}}}
</li>
<li>
===truncateAndLeftPad===
_public static String truncateAndLeftPad(	String value,int maxLength, String pad);_

ADDICIONADO NA VERSÃO 0.2
Este método formata uma String, truncando caso o 'value' for maior que o tamanho (@param maxLength) ou tambem adiciona (@param pad) do lado esquerdo do primeiro parâmetro (@param value) até preencher o tamanho(@param maxLength)
Exemplo: 
{{{
String value = StringUtils.truncateAndLeftPad("VALOR", 12, "X"  );
//value será igual a "XXXXXXXVALOR" como que o tamanho é menor que 12 sera adicionado o caracter 'X' até preencher com 12 posições do lado esquerdo.


value =  StringUtils.truncateAndLeftPad("123456789", 20, "0"  );
//value será igual a "00000000000123456789" 
}}}
</li>
<li>
===nullToEmpty===
_public static String nullToEmpty(final String value)_
_public static String nullToEmpty(final String value, boolean trim)_

Este método quando receber um valor null ele retorna uma String vazia.
</li>
<li>
===isNullOrEmpty===
_public static boolean isNullOrEmpty(final String value)_

Este método verifica se um texto é vazio ou nulo. Caso for retorna verdadeiro.
</li>

</ul>